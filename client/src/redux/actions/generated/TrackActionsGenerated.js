/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5d525f5a7b158e50f28eb4af
*
* You will get 10% discount for each one of your friends
* 
*/
/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN TrackActionsGenerated.js PLEASE EDIT ../TrackActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import TrackApi from "../../../api/TrackApi";

let actionsFunction = {

  //CRUD METHODS

  // Create track
  createTrack: function(track) {
    return function(dispatch) {
      return TrackApi
        .createTrack(track)
        .then(track => {
          dispatch(actionsFunction.createTrackSuccess(track));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createTrackSuccess: function(track) {
    return { type: types.CREATE_TRACK_SUCCESS, payload: track };
  },


  // Delete track
  deleteTrack: function(id) {
    return function(dispatch) {
      return TrackApi
        .deleteTrack(id)
        .then(track => {
          dispatch(actionsFunction.deleteTrackSuccess(track));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteTrackSuccess: function(track) {
    return { type: types.DELETE_TRACK_SUCCESS, payload: track };
  },


  // Get track
  loadTrack: function(id) {
    return function(dispatch) {
      return TrackApi
        .getOneTrack(id)
        .then(track => {
          dispatch(actionsFunction.loadTrackSuccess(track));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadTrackSuccess: function(track) {
    return { type: types.GET_TRACK_SUCCESS, payload: track };
  },

  // Load  list
  loadTrackList: function() {
    return function(dispatch) {
      return TrackApi
        .getTrackList()
        .then(list => {
          dispatch(actionsFunction.loadTrackListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadTrackListSuccess: function(list) {
    return { type: types.LIST_TRACK_SUCCESS, payload: list };
  },

	
  // Save track
  saveTrack: function(track) {
    return function(dispatch) {
      return TrackApi
        .saveTrack(track)
        .then(track => {
          dispatch(actionsFunction.saveTrackSuccess(track));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveTrackSuccess: function(track) {
    return { type: types.UPDATE_TRACK_SUCCESS, payload: track };
  },


  /*
  Name: LatestTrackByCarID
  Description: Get latest track by car ID
  Params: 
  */
  LatestTrackByCarID: function(...params) {
    return function(dispatch) {
      return TrackApi
        .LatestTrackByCarID(params)
        .then( result => {
          dispatch(actionsFunction.LatestTrackByCarIDSuccess(result));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  LatestTrackByCarIDSuccess: function(result) {
    return { type: types.LATESTTRACKBYCARID_TRACK_SUCCESS, payload: result };
  },
		
};

export default actionsFunction;
